ANALYZING GENCODE GRCH38

files downloaded on 12/13/16

# get annotation
wget ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_25/gencode.v25.annotation.gtf.gz
gunzip gencode.v25.annotation.gtf.gz

# get genome fasta file
wget ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_25/GRCh38.primary_assembly.genome.fa.gz
gunzip GRCh38.primary_assembly.genome.fa.gz

# generate per-junction equivalence junction sequence
python getJunctionsFromGTF.py -f GRCh38.primary_assembly.genome.fa -a gencode.v25.annotation.gtf -o GRCh38_gencodev25_equivJunctions.txt

# get unique junctions
sort -k2 GRCh38_gencodev25_equivJunctions.txt | uniq > GRCh38_gencodev25_equivJunctions_unique.txt

# generate counts per equivalence junction sequence
sort -k1 GRCh38_gencodev25_equivJunctions.txt | uniq | cut -f1 | sort | uniq -c | sort -k1nr > GRCh38_gencodev25_equivSeqCounts.txt

# % of junctions not precisely defined
# gets total count of junctions, and precisely defined are those with equiv junc seq == "" 
awk '{print $1}' GRCh38_gencodev25_equivSeqCounts.txt | paste -sd+ - | bc 

# number of junctions where equivalent junction can be resolved by accounting for agGT 
grep AGGT GRCh38_gencodev25_equivSeqCounts.txt | awk '{print $1}' | paste -sd+ - | bc

# number of unique gene names that have at least 1 junction with a non-precise boundary sequence
# get only those rows with 5 cols (those with an equiv junc sequence, and count unique gene names
cat GRCh38_gencodev25_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq | wc -l

# number of unique gene names that have at least 1 junction with a non-precise boundary sequence that can't be accounted for by splice signal
grep -v AGGT GRCh38_gencodev25_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq | wc -l

# get all unique gene names
cat GRCh38_gencodev25_equivJunctions_unique.txt | awk 'NF == 4' | cut -f2 | sort | uniq > GRCh38_gencodev25_geneNames.txt
cat GRCh38_gencodev25_uniqueExonsWithEquivJuncs.txt | awk 'NF == 5' | cut -f2 | sort | uniq >> GRCh38_gencodev25_geneNames.txt
sort GRCh38_gencodev25_geneNames.txt | uniq > GRCh38_gencodev25_uniqueGeneNames.txt

ANALYZING GENCODE GRCm38

files downloaded on 12/16/16

# get annotation
wget ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_mouse/release_M12/gencode.vM12.annotation.gtf.gz
gunzip gencode.vM12.annotation.gtf.gz

# get genome fasta file
wget ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_mouse/release_M12/GRCm38.primary_assembly.genome.fa.gz
gunzip GRCm38.primary_assembly.genome.fa.gz

# generate per-junction equivalence junction sequence
python getJunctionsFromGTF.py -f GRCm38.primary_assembly.genome.fa -a gencode.vM12.annotation.gtf -o GRCm38_gencodevM12_equivJunctions.txt

# get unique junctions
sort -k2 GRCm38_gencodevM12_equivJunctions.txt | uniq > GRCm38_gencodevM12_equivJunctions_unique.txt

# generate counts per equivalence junction sequence
sort -k1 GRCm38_gencodevM12_equivJunctions.txt | uniq | cut -f1 | sort | uniq -c | sort -k1nr > GRCm38_gencodevM12_equivSeqCounts.txt

# % of junctions not precisely defined
# gets total count of junctions, and precisely defined are those with equiv junc seq == ""
awk '{print $1}' GRCm38_gencodevM12_equivSeqCounts.txt | paste -sd+ - | bc

# number of junctions where equivalent junction can be resolved by accounting for agGT
grep AGGT GRCm38_gencodevM12_equivSeqCounts.txt | awk '{print $1}' | paste -sd+ - | bc

# number of unique gene names that have at least 1 junction with a non-precise boundary sequence that can't be accounted for by splice signal
grep -v AGGT GRCm38_gencodevM12_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq | wc -l

# get all unique gene names
cat GRCm38_gencodevM12_equivJunctions_unique.txt | awk 'NF == 4' | cut -f2 | sort | uniq > GRCm38_gencodevM12_geneNames.txt
cat GRCm38_gencodevM12_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq >> GRCm38_gencodevM12_geneNames.txt
sort GRCm38_gencodevM12_geneNames.txt | uniq > GRCm38_gencodevM12_uniqueGeneNames.txt

ANALYZING ENGSTROM SIMULATED TRANSCRIPTOME (Human Simulation 1)
# generate per-junction equivalence junction sequence
python getJunctionsFromGTF.py -f hg19_genome.fa -a Simulated_transcriptomes/simulated_reads_transcripts_1.gtf -o Sim1transcriptome_equivJunctions.txt

# get unique junctions
sort -k2 Sim1transcriptome_equivJunctions.txt | uniq > Sim1transcriptome_equivJunctions_unique.txt

# generate counts per equivalence junction sequence
sort -k1 Sim1transcriptome_equivJunctions.txt | uniq | cut -f1 | sort | uniq -c | sort -k1nr > Sim1transcriptome_equivSeqCounts.txt

# % of junctions not precisely defined
# gets total count of junctions, and precisely defined are those with equiv junc seq == ""
awk '{print $1}' Sim1transcriptome_equivSeqCounts.txt | paste -sd+ - | bc

# number of junctions where equivalent junction can be resolved by accounting for agGT
grep AGGT Sim1transcriptome_equivSeqCounts.txt | awk '{print $1}' | paste -sd+ - | bc

# number of unique gene names that have at least 1 junction with a non-precise boundary sequence that can't be accounted for by splice signal
grep -v AGGT Sim1transcriptome_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq | wc -l

# get all unique gene names
cat Sim1transcriptome_equivJunctions_unique.txt | awk 'NF == 4' | cut -f2 | sort | uniq > Sim1transcriptome_geneNames.txt
cat Sim1transcriptome_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq >> Sim1transcriptome_geneNames.txt
sort Sim1transcriptome_geneNames.txt | uniq > Sim1transcriptome_uniqueGeneNames.txt

ANALYZING ENGSTROM SIMULATED TRANSCRIPTOME (Human Simulation 2)

# generate per-junction equivalence junction sequence
python getJunctionsFromGTF.py -f hg19_genome.fa -a Simulated_transcriptomes/simulated_reads_transcripts_2.gtf -o Sim2transcriptome_equivJunctions.txt

# get unique junctions
sort -k2 Sim2transcriptome_equivJunctions.txt | uniq > Sim2transcriptome_equivJunctions_unique.txt

# generate counts per equivalence junction sequence
sort -k1 Sim2transcriptome_equivJunctions.txt | uniq | cut -f1 | sort | uniq -c | sort -k2nr > Sim2transcriptome_equivSeqCounts.txt

# % of junctions not precisely defined
# gets total count of junctions, and precisely defined are those with equiv junc seq == ""
awk '{print $1}' Sim2transcriptome_equivSeqCounts.txt | paste -sd+ - | bc

# number of junctions where equivalent junction can be resolved by accounting for agGT
grep AGGT Sim2transcriptome_equivSeqCounts.txt | awk '{print $1}' | paste -sd+ - | bc

# number of unique gene names that have at least 1 junction with a non-precise boundary sequence that can't be accounted for by splice signal
grep -v AGGT Sim2transcriptome_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq | wc -l

# get all unique gene names
cat Sim2transcriptome_equivJunctions_unique.txt | awk 'NF == 4' | cut -f2 | sort | uniq > Sim2transcriptome_geneNames.txt
cat Sim2transcriptome_equivJunctions_unique.txt | awk 'NF == 5' | cut -f2 | sort | uniq >> Sim2transcriptome_geneNames.txt
sort Sim2transcriptome_geneNames.txt | uniq > Sim2transcriptome_uniqueGeneNames.txt

ANALYZING CIRCBASE TRANSCRIPTS

# get data 12/28/16
wget http://www.circbase.org/download/hsa_hg19_circRNA.txt

# generate per-junction equivalence junction sequence
python getJunctionsFromTxt.py -f /scratch/PI/horence/linda/EquivJuncPaper/hg19_genome.fa -t /scratch/PI/horence/linda/EquivJuncPaper/hsa_hg19_circRNA.txt -o /scratch/PI/horence/linda/EquivJuncPaper/hsa_hg19_circRNA_EquivSeqs.txt > circBase.out

# generate counts per equivalence junction sequence
sort -k1 hsa_hg19_circRNA_EquivSeqs.txt | uniq | cut -f1 | sort | uniq -c | sort -k1nr > hsa_hg19_circRNA_equivSeqCounts.txt
